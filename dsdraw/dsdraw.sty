%
%	DSDRAW: tools for drawing data structures and maybe more
%	Jander Moreira -- DC/UFSCar
%
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{dsdraw}[2021/11/28 DSDRAW: tools %
	for drawing data structures]


\RequirePackage{pgfopts} % for \ProcessPgfOptions
\RequirePackage{bm} % for \boldsymbol
\RequirePackage{tikz} % for almost everything
\RequirePackage{xstring} % in linked lists
\input{binhex} % for base conversions


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Symbols and control sequences

% the empty symbol
\newcommand{\EmptySymb}{%
	\scalebox{1.1}{\raisebox{0.1em}{$\boldsymbol{\ominus}$}}%
}

% the null symbol
\newcommand{\NullSymb}{%
	\mbox{\scalebox{1.1}{\raisebox{0.1em}{$\boldsymbol{\oslash}$}}}%
}

\def\dsbreakcurved{}
\def\dsbreakstraight{}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Utilities

% dstikzset: wrapper for \tikzset to accept macros as options
\newcommand{\dstikzset}[1]{%
	\def\keysmacro{/tikz/.cd, #1}%
	\edef\ekeysmacro{\keysmacro}%
	\pgfkeysalsofrom{\ekeysmacro}%
}

%% dscalclength: calculates the length in points of the expression and
%% 	stores the result in \dslengthresult
%\newlength{\dslengthresult}
%\newcommand{\dscalclength}[1]{%
%	\pgfmathseseqengthmacro{\@length}{#1}%
%	\global\seseqength{\dslengthresult}{\@length}%
%}


\ExplSyntaxOn
% dshexset{name}[endian]{value}[minbytes]: sets or creates a new byte sequence
%	#1: name
%	#2: endian (optional): big or litseqe; default: big
%	#3: value
%	#4: minimum number of bytes (optional); default: 2
\NewDocumentCommand{\dshexset}{mO{big}mO{2}} {
	\seq_gclear_new:c {g__#1_bytes_seq}

	\int_zero_new:N \l_value_int
	\pgfmathparse{int(#3)}
	\int_set:Nn \l_value_int {\pgfmathresult}
	\int_zero_new:N \l_counter_int
	\int_set:Nn \l_counter_int {#4}
	
	\int_zero_new:N \l_byte_int
	\bool_do_until:nn {\l_stop_bool}{
		\int_set:Nn \l_byte_int {\int_mod:nn {\l_value_int} {256}}
		\int_set:Nn \l_value_int {\int_div_truncate:nn {\l_value_int} {256}}
		\tl_if_eq:nnTF {#2} {big} {
			\seq_put_left:cx
				{g__#1_bytes_seq} {\nhex{2}{\int_use:N \l_byte_int}}
		}{
			\tl_if_eq:nnTF {#2} {little} {
					\seq_put_right:cx
						{g__#1_bytes_seq} {\nhex{2}{\int_use:N \l_byte_int}}
				}{
					\seq_put_right:cx {g__#1_bytes_seq} {??}
				}
		}
		\int_decr:N \l_counter_int
		\bool_set:Nn \l_stop_bool {
			\int_compare_p:n {\l_counter_int <= 0} &&
			\int_compare_p:n {\l_value_int = 0}
		}
		
	}
}

% dshexshow[sep]{name}: shows the sequence of bytes created by \dshexset
%	#1: separator for bytes (optional)
%	#2: name
\newcommand{\dshexshow}[2][]{
	\seq_use:cn {g__#2_bytes_seq} {#1}
}

\newcommand{\dshexbyte}[2]{
	\seq_item:cn {g__#1_bytes_seq} {#2 + 1}
}

\newcommand{\dshexcount}[1]{
	\seq_count:c {g__#1_bytes_seq}
}
\ExplSyntaxOff

% ds@loadlibrary: load a single library
%	#1: library name
\newcommand{\ds@loadlibrary}[1]{%
	\ifcsname ds@library#1loaded\endcsname%
		%\PackageWarning{dsdraw}{Library '#1' already loaded.}%
	\else%
		\IfFileExists{#1.code.tex}{
			\makeatletter%
			\input{#1.code.tex}%
			\makeatother
			\expandafter\def\csname ds@library#1loaded\endcsname{defined}%
		}{
			\PackageWarning{dsdraw}{Couldn't find any library named '#1'.}%
		}
	\fi%
}

% ds@requirelibrary: load a single library (internal use)
%	#1: library name
\newcommand{\ds@requirelibrary}[1]{%
	\ifcsname ds@library#1loaded\endcsname%
		%\PackageWarning{dsdraw}{Library '#1' already loaded.}%
	\else%
		\IfFileExists{#1.code.tex}{
			\makeatletter%
			\input{#1.code.tex}%
			\expandafter\def\csname ds@library#1loaded\endcsname{defined}%
		}{
			\PackageError{dsdraw}{Couldn't find any library named '#1'.}%
		}
	\fi%
}

% usedslibrary: loads a list of libraries
%  #1: comma-separated list of libraries
\DeclareDocumentCommand{\usedslibrary}{%
	>{\SplitList{,}}m%
}{%
	\ProcessList{#1}{\ds@loadlibrary}%
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% General 

\usetikzlibrary{arrows.meta}
\tikzset{
	every link/.style = {
		line width = 0.5pt,
		-latex,
		shorten > = 0.5pt, % todo: parâmetro
		shorten < = -1.2mm, % todo: parâmetro
		{Circle[open, width=0.8mm,length=0.8mm]}-latex,
	},
}

\newcommand{\dslink}[3][--]{%
	\draw[every link] #2 #1 #3;
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Package options: import libraries
\pgfkeys{
	dsdraw/.cd,
	sourcecodepro/.code = {\RequirePackage{sourcecodepro}},
	.unknown/.code = {\ds@loadlibrary{\pgfkeyscurrentname}},
}
\ProcessPgfPackageOptions{/dsdraw}
\relax



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\endinput
